"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Banding vs. Quality: perceptual impact and objective assessment","L. Krasula; Z. Li; C. G. Bampis; M. Afonso; N. F. Miret; J. Sole","Netflix Inc., Los Gatos, CA, USA; Netflix Inc., Los Gatos, CA, USA; Netflix Inc., Los Gatos, CA, USA; Netflix Inc., Los Gatos, CA, USA; Netflix Inc., Los Gatos, CA, USA; Netflix Inc., Los Gatos, CA, USA","2022 IEEE International Conference on Image Processing (ICIP)","18 Oct 2022","2022","","","2236","2240","Staircase-like contours introduced to a video by quantization in flat areas, commonly known as banding, have been a longstanding problem in both video processing and quality assessment communities. The fact that even a relatively small change of the original pixel values can result in a strong impact on perceived quality makes banding especially difficult to be detected by objective quality metrics. In this paper, we study how banding annoyance compares to more commonly studied scaling and compression artifacts with respect to the overall perceptual quality. We further propose a simple combination of VMAF and the recently developed banding index, CAMBI, into a banding-aware video quality metric showing improved correlation with overall perceived quality.","2381-8549","978-1-6654-9620-9","10.1109/ICIP46576.2022.9898041","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9898041","Banding;Video Compression;Objective Video Quality Metrics;VMAF;CAMBI","Measurement;Image coding;Quantization (signal);Correlation;Quality assessment;Indexes;Video recording","","1","","22","IEEE","18 Oct 2022","","","IEEE","IEEE Conferences"
"The Engineering Implications of Code Maintenance in Practice","N. Lee; R. Abreu; M. Yatbaz; H. Qu; N. Nagappan","Meta Platforms, Inc., Menlo Park, USA; Meta Platforms, Inc., Menlo Park, USA; Meta Platforms, Inc., Menlo Park, USA; Meta Platforms, Inc., Menlo Park, USA; Meta Platforms, Inc., Menlo Park, USA","2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)","19 Dec 2022","2022","","","568","577","Allowing developers to move fast when evolving and maintaining low-latency, large-scale distributed systems is a challenging problem due to i) sheer system complexity and scale, ii) degrading code quality, and iii) difficulty of performing reliable rapid change management while the system is in production. Addressing these problems has many benefits to increase system developer efficiency, reliability, performance, as well as code maintenance. In this paper, we present a real-world case study of an architectural refactoring project within an industrial setting. The system in scope is our codenamed ItemIndexer delivery system (I2DS), which is responsible for processing and delivering a large number of items at rapid speed to billions of users in real time. I2DS is running in production, refactored live over a period of 9 months, and assessed through impact validation studies that show a 42% improvement in developer efficiency, 87% improvement in reliability, 20% increase in item scoring, a 10% increase in item matching, and 14% CPU savings.","2576-3148","978-1-6654-7956-1","10.1109/ICSME55016.2022.00078","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9977444","Architectural Refactoring;Code Quality;Per-formance;Reliability;Developer Efficiency","Measurement;Software maintenance;Codes;System performance;Production;Maintenance engineering;Real-time systems","","","","29","IEEE","19 Dec 2022","","","IEEE","IEEE Conferences"
"Towards a Framework for Improving Transparency in the Software Engineering Process","B. Isong; P. Ofem; F. Lugayizi","Department of Computer Science, North-West University, Mmabatho, South Africa; Department of Computer Science, North-West University, Mmabatho, South Africa; Department of Computer Science, North-West University, Mmabatho, South Africa","2022 12th International Conference on Software Technology and Engineering (ICSTE)","23 Mar 2023","2022","","","19","28","Transparency is a relatively new and emerging non-functional quality requirement yet to be fully theoretically and empirically explored in the software engineering process (SEP). This paper presents a framework for formalising and improving the transparency of software products. The study argues that improving the transparency of software products improves their quality and maintainability, achieves effective communication and meets stakeholders’ transparency requirements concerns. Empowered by a standard data collection procedure, it utilises well-known concepts in developing a framework that captures the complex and multifaceted nature of a transparency improvement process. Current assertions by various transparency researchers and empirical evidence, coupled with the lack of measurement of transparency in SEP, gave rise to our proposition that the application of a transparency improvement programme in the early phase of SEP would lead to more transparency in software artefacts and a better quality of the final software system. In developing the framework, the study fills a significant gap in the transparency literature and potentially offers stakeholders, including requirements engineers, developers and organisations, a model-based framework approach to aid transparency evaluation and improvement. The study concluded by suggesting that the framework contributes significantly to providing a formal basis for theory building in transparency implementation and quality improvement by enabling a shared understanding among stakeholders in SEP.","","978-1-6654-6355-3","10.1109/ICSTE57415.2022.00011","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10070863","transparency;software product transparency;transparency requirements;transparency evaluation;transparency factors;transparency metrics;transparency improvement;requirements engineering","Q-factor;Knowledge engineering;Phase measurement;Buildings;Data collection;Software systems;Stakeholders","","2","","63","IEEE","23 Mar 2023","","","IEEE","IEEE Conferences"
"Software Dependability Assessment Using DevOps Metrics","F. Popențiu-Vlădicescu; G. Albeanu","“Politehnica” University of Bucharest & Academy of Romanian Scientists, Bucharest, Romania; Department of Engineering and Computer Science, “Spiru Haret” University, Bucharest, Romania","2022 6th International Conference on Business and Information Management (ICBIM)","23 Nov 2023","2022","","","168","172","Assessing software dependability is a major task of Total Management Dependability strongly motivated by the framework Total Quality Management and Lean Six Sigma methodology used by software organizations to improve performance and assuring constant collaboration with stakeholders. The most recent approach in improving software quality is DevOps, a merging of software development, software quality assurance, and software deployment and integration (IT operations). This paper addresses DevOps metrics useful to assess the software dependability. Both static and dynamic models are considered. Firstly, recent developments on software reliability, availability, safety, security, and resilience are reviewed. In the second part, extensions of dependability metrics obtained by soft computing (fuzzy, intuitionistic-fuzzy, and neutrosophic numbers) are presented along with practical examples.","","978-1-6654-9254-6","10.1109/ICBIM57406.2022.00037","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10323551","DevOps;software dependability;quality metrics;soft computing","Measurement;Software quality;Organizations;Software reliability;Safety;Stakeholders;Security","","1","","24","IEEE","23 Nov 2023","","","IEEE","IEEE Conferences"
"Gradient Difference-Predictive Coding Network (GD-PredNet): Reducing the Convergence Time for Future Frame Prediction with Infinitesimal Quality Trade-off","S. R. Mikkilineni; T. D. Privat; M. W. Totaro","Center for Advanced Computer Studies, University of Louisiana at Lafayette, Lafayette, LA, USA; Center for Advanced Computer Studies, University of Louisiana at Lafayette, Lafayette, LA, USA; Center for Advanced Computer Studies, University of Louisiana at Lafayette, Lafayette, LA, USA","SoutheastCon 2022","2 May 2022","2022","","","281","288","Even though future frame prediction in videos is a relatively young unsupervised learning task, it has shown promise by accommodating the networks to effectively learn efficient internal representations in a visual hyperspace. Predictive Coding Network (PredNet) uses future frame predictions as a learning signal and has a legacy background of unconscious inference, free energy, and predictive coding model of the visual cortex; it is still a relatively young network compared to RNNs, CNNs, and so on. Although Rao and Ballard’s proposed Predictive Coding (PC) model is aimed at reducing the redundancy within the learned internal representations by a network, and Lotter et al.’s design of the PredNet might not be the ideal replication of the PC model, it still shows promise for learning better less-redundant internal representations than other networks. In this paper, we augment PredNet to enhance its performance in future frame prediction. Additionally, we introduce a new measure known as the gradient difference error (GDE) measure based on the gradient difference loss (GDL) function proposed by Mathieu et al. We do this to adapt the GDL function to the context of PredNet since it uses an implicit loss function besides the explicit loss used during training. Our experimental results show that PredNet, when using a combination of the L1 loss function with GDE or GDL, is faster to converge to the best performance while trading off minimal quality of the predictions within a given training window. In doing so, we transform PredNet into Gradient Difference-PredNet (GD-PredNet), and we aim to encourage increased research in Predictive Coding and PredNet.","1558-058X","978-1-6654-0652-9","10.1109/SoutheastCon48659.2022.9763950","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9763950","Unsupervised Learning;PredNet;Videos;Gradient Difference;Loss Functions;Predictive Coding;Future Frame Prediction;Crowd Sourced Dataset;Something-Something dataset","Training;Visualization;Measurement uncertainty;Transforms;Predictive coding;Predictive models;Brain modeling","","2","","23","IEEE","2 May 2022","","","IEEE","IEEE Conferences"
"Beyond the Code: Investigating the Effects of Pull Request Conversations on Design Decay","C. Barbosa; A. Uchôa; D. Coutinho; W. K. G. Assunção; A. Oliveira; A. Garcia; B. Fonseca; M. Rabelo; J. E. Coelho; E. Carvalho; H. Santos","Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Federal University of Ceará (UFC), Itapajé, Brazil; Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; North Carolina State University (NCSU), Raleigh, USA; Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Federal University of Alagoas (UFAL), Maceió, Brazil; Federal University of Ceará (UFC), Itapajé, Brazil; Federal University of Ceará (UFC), Itapajé, Brazil; Federal University of Ceará (UFC), Itapajé, Brazil; Federal University of Ceará (UFC), Itapajé, Brazil","2023 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)","8 Nov 2023","2023","","","1","12","Background: Code development is done collaboratively in platforms such as GitHub and GitLab, following a pull-based development model. In this model, developers actively communicate and share their knowledge through conversations. Pull request conversations are affected by social aspects such as communication dynamics among developers, discussion content, and organizational dynamics. Despite prior studies indicating that social aspects indeed impact software quality, it is still unknown to what extent social aspects influence design decay during software development. Thus, since social aspects are intertwined with design and implementation decisions, there is a need for investigating how social aspects contribute to avoiding, reducing, or accelerating design decay. Aims: To fill this gap, we performed a study aimed at investigating the effects of pull request conversation on design decay. Method: We investigated 10,746 pull request conversations from 11 open-source systems, characterizing in terms of three different social aspects: discussion content, organizational and communication dynamics. We considered 18 social metrics to these three social aspects, and analyzed how they associate with design decay. We used a statistical approach to assess which social metrics are able to discriminate between impactful and unimpactful pull requests. Then, we employed a multiple logistic regression model to evaluate the influence of each social metric per social aspect in the presence of each other on design decay. Finally, we also observed how the combination of all social metrics influences the design decay. Results: Our findings reveal that social metrics related to the size and duration of a discussion, the presence of design-related keywords, the team size, and gender diversity can be used to discriminate between design impactful and unimpactful pull requests. Organizational growth and gender diversity prevent decay. Each software community has its unique aspects that can be used to detect and prevent design decay. Also, design improvements can be accomplished by timely feedback, engaged communication, and design-oriented discussions with the contribution of multiple participants who provide significant comments. Conclusion: The social aspects related to pull request conversations are useful indicators of design decay.","","978-1-6654-5223-6","10.1109/ESEM56168.2023.10304805","CNPq(grant numbers:140770/2021-6,140185/2020-8,434969/2018-4,312149/2016-6,409536/2017-2,427787/2018-1); CAPES/Procad(grant numbers:175956); FAPERJ(grant numbers:22520-7/2016); FUNCAP(grant numbers:BP5-00197-00042.01.00/22); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10304805","pull request;social aspects;design decay","Logistic regression;Codes;Oral communication;Software quality;Particle measurements;Cultural differences;Software measurement","","","","48","IEEE","8 Nov 2023","","","IEEE","IEEE Conferences"
"Unveiling the Relationship Between Continuous Integration and Code Coverage","D. Saraiva; D. A. Da Costa; U. Kulesza; G. Sizílio; J. G. Neto; R. Coelho; M. Nagappan","Federal University of Rio Grande Do Norte, Brazil; University of Otago, New Zealand; Federal University of Rio Grande Do Norte, Brazil; Federal University of Rio Grande Do Norte, Brazil; Federal University of Rio Grande Do Norte, Brazil; Federal University of Rio Grande Do Norte, Brazil; University of Waterloo, Canada","2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)","12 Jul 2023","2023","","","247","259","Continuous integration (CI) is a software engineering practice that advocates the frequent integration of software through an automated build process. Existing research has explored the benefits of CI, such as detecting errors earlier in the software life-cycle. Although CI heavily focuses on automated tests, it is still unclear whether CI is associated with better code coverage, which could be a major benefit of using CI. To investigate whether CI is associated with an improvement in code coverage, our work compares 30 projects that adopted CI (CI projects) and 30 projects that have never adopted CI (NOCI projects). In total, we studied 1,440 versions from different projects to analyze trends in code coverage related to CI. While evaluating trends of code coverage within CI and NOCI projects, we observe more projects with rising trends of code coverage in CI projects (50%) than NOCI projects (10%). Moreover, the maintaining trends are different, as CI projects tend to stabilize at a higher code coverage rate than NOCI projects. Investigating the CI projects alone, the statistical evidences indicate that the adoption of CI is associated with the increase in code coverage. The findings of this study, therefore, reveal a positive association between CI and a higher code coverage rate.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00043","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174188","software testing;continuous integration;code coverage;empirical study","Codes;Market research;Software;Data mining;Software engineering","","1","","64","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Towards the Assisted Decomposition of Large-Active Files","J. Lefever; Y. Cai; R. Kazman; H. Fang","Drexel University, Philadelphia, USA; Drexel University, Philadelphia, USA; University of Hawaii, Honolulu, USA; Drexel University, Philadelphia, USA","2023 IEEE 20th International Conference on Software Architecture Companion (ICSA-C)","24 Apr 2023","2023","","","126","130","Tightly coupled and interdependent systems inhibit productivity by requiring developers to carefully coordinate their changes, even when modifying subsystems that should be independent of one another. Poor architectural decisions frequently lead to the presence of large, change-prone source files that are at the center of complexes of technical debt [11], [6]. This kind of technical debt quickly incurs interest both through coordination costs and error-proneness. In this paper, we present a new approach for decomposing these ""large-active"" files to pay down critical technical debt. We package our approach as a refactoring recommendation system. Each recommendation is determined by analyzing patterns of co-change and mutual dependency among files. Each recommendation corresponds to a responsibility the large-active file has in relation to the rest of the system. By moving recommended functionality from the large-active file into smaller files, developers can reduce the impact of a debt-laden file and clarify its essential responsibilities. A key advantage of this approach over prior work is that we better focus effort; we avoid spending developer effort refactoring code that is only superficially problematic. We achieve this by incorporating revision history into both determining and ranking recommendations. Each recommendation corresponds to some change-prone responsibility. We present some examples of this approach in action and outline our future plans.","2768-4288","978-1-6654-6459-8","10.1109/ICSA-C57050.2023.00037","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10092677","refactoring;design improvement;software architecture","Couplings;Productivity;Codes;Costs;Software architecture;Computer bugs;Computer architecture","","","","18","IEEE","24 Apr 2023","","","IEEE","IEEE Conferences"
